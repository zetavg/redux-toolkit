name: Yarn NPM Publish
inputs:
  npm-registry-server:
    type: string
    required: false
    description: (Optional) The npm registry server to use, for example, https://registry.npmjs.org for NPM, or https://npm.pkg.github.com for GitHub Packages.
    default: 'https://registry.npmjs.org'
  npm-auth-token:
    type: string
    required: true
    description: The npm authentication token to use for publishing packages.
  version:
    type: string
    required: true
    description: The version for publishing. The version in package.json will be updated to this value temporarily so that the package can be published with this version. The heading "v" will be removed if it exists (e.g. "v1.0.0" will be "1.0.0"). If the version includes a hyphen (e.g. "1.2.3-pre1"), the package will be published with the "next" tag, otherwise with the "latest" tag.
  working-directory:
    type: string
    required: false
    description: (Optional) The working directory, where the package's package.json file is located.
    default: '.'
  publish-command:
    type: string
    required: false
    description: (Optional) The command to run to publish the package. Defaults to 'yarn npm publish'.
    default: 'yarn npm publish'
  package-page-url:
    type: string
    required: false
    description: (Optional) The URL of the package's page. This will be automatically generated if not provided.
outputs:
  package-name:
    description: "The name of the published package."
    value: ${{ steps.get-package-name.outputs.name }}
  package-version:
    description: "The version of the published package."
    value: ${{ steps.get-release-version.outputs.version }}
  url:
    description: "The URL of the published package."
    value: ${{ steps.get-release-url.outputs.url }}
runs:
  using: 'composite'
  steps:
    - name: Get package name
      id: get-package-name
      shell: bash
      run: |
        cd ${{ inputs.working-directory }}
        package_name=$(jq -r '.name' package.json)
        echo "Package name: ${package_name}"
        echo "name=${package_name}" >> $GITHUB_OUTPUT
    - name: Get release version
      id: get-release-version
      shell: bash
      run: |
        version_string="${{ inputs.version }}"
        release_version="${version_string/#v/}"
        echo "Version: ${release_version}"
        echo "version=${release_version}" >> $GITHUB_OUTPUT
    - name: Get release URL
      id: get-release-url
      env:
        PACKAGE_PAGE_URL: ${{ inputs.package-page-url }}
      shell: bash
      run: |
        if [ -n "$PACKAGE_PAGE_URL" ]; then
          release_url="$PACKAGE_PAGE_URL"
        else
          release_url="https://www.npmjs.com/package/${{ steps.get-package-name.outputs.name }}/v/${{ steps.get-release-version.outputs.version }}"
        fi
        echo "Release URL: ${release_url}"
        echo "url=${release_url}" >> $GITHUB_OUTPUT
    - name: Set package version
      shell: bash
      run: |
        cd ${{ inputs.working-directory }}
        jq '.version = "${{ steps.get-release-version.outputs.version }}"' package.json > package.json.updated
        mv package.json package.json.original
        mv package.json.updated package.json
    - name: Publish package
      env:
        NPM_REGISTRY_SERVER: ${{ inputs.npm-registry-server }}
        NPM_AUTH_TOKEN: ${{ inputs.npm-auth-token }}
      shell: bash
      run: |
        cd ${{ inputs.working-directory }}
        yarn config set npmRegistryServer "$NPM_REGISTRY_SERVER"
        echo -e "npmRegistries:\n  \"$NPM_REGISTRY_SERVER\":\n    npmAuthToken: $NPM_AUTH_TOKEN" > ~/.yarnrc.yml
        ${{ inputs.publish-command }} --tag ${{ contains(steps.get-release-version.outputs.version, '-') && 'next' || 'latest' }}
